(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{354:function(a,t,e){"use strict";e.r(t);var r=e(20),i=Object(r.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"_5-vertex-processing-1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-vertex-processing-1"}},[a._v("#")]),a._v(" 5 - Vertex Processing 1")]),a._v(" "),t("p",[a._v("Yoonsang Lee"),t("br"),a._v("\nHanyang University"),t("br"),a._v("\nSpring 2025")]),a._v(" "),t("h2",{attrs:{id:"outline"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#outline"}},[a._v("#")]),a._v(" Outline")]),a._v(" "),t("ul",[t("li",[a._v("Rasterization Pipeline & Vertex Processing")]),a._v(" "),t("li",[a._v("Modeling Transformation")]),a._v(" "),t("li",[a._v("Viewing Transformation")])]),a._v(" "),t("h2",{attrs:{id:"rasterization-pipeline-vertex-processing"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rasterization-pipeline-vertex-processing"}},[a._v("#")]),a._v(" Rasterization Pipeline & Vertex Processing")]),a._v(" "),t("h2",{attrs:{id:"recall-rasterization-pipeline"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#recall-rasterization-pipeline"}},[a._v("#")]),a._v(" Recall: Rasterization Pipeline")]),a._v(" "),t("ul",[t("li",[a._v("Vertex Processing\n"),t("ul",[t("li",[a._v("정점(vertex)을 화면 좌표(screen space)로 변환")])])]),a._v(" "),t("li",[a._v("Primitive Processing\n"),t("ul",[t("li",[a._v("정점들을 모아 polygon 구성")])])]),a._v(" "),t("li",[a._v("Scan Conversion\n"),t("ul",[t("li",[a._v("polygon을 fragment로 변환")])])]),a._v(" "),t("li",[a._v("Fragment Processing\n"),t("ul",[t("li",[a._v("조명 및 텍스처에 따라 각 fragment의 색 결정")])])]),a._v(" "),t("li",[a._v("Per-sample Operations\n"),t("ul",[t("li",[a._v("depth test, alpha blending 등 수행")])])])]),a._v(" "),t("h2",{attrs:{id:"recall-rasterization-pipeline-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#recall-rasterization-pipeline-2"}},[a._v("#")]),a._v(" Recall: Rasterization Pipeline")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("Vertex Processing:")]),a._v(" "),t("ul",[t("li",[a._v("정점들을 화면 좌표계로 변환")]),a._v(" "),t("li",[a._v("일련의 정점 변환 시퀀스를 적용")])])]),a._v(" "),t("li",[t("p",[a._v("우리가 지금까지 학습한 범위는 →")]),a._v(" "),t("ul",[t("li",[a._v("Primitive Processing ~ Per-sample Operations")])])]),a._v(" "),t("li",[t("p",[a._v("오늘과 다음 시간에 볼 내용 →")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("Vertex Processing")])])])])]),a._v(" "),t("h2",{attrs:{id:"vertex-processing"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vertex-processing"}},[a._v("#")]),a._v(" Vertex Processing")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("각 객체의 body frame에서의 정점 위치:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("P₁, P₂, P₃\n")])])])]),a._v(" "),t("li",[t("p",[a._v("World frame으로의 변환:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("M * P₁, M * P₂, M * P₃\n")])])])]),a._v(" "),t("li",[t("p",[a._v("→ 하지만 아직 화면에 표시하기 위해선 추가 개념이 필요함")]),a._v(" "),t("p",[t("strong",[a._v("“카메라”가 장면을 바라본다는 개념 도입 필요")])])]),a._v(" "),t("li",[t("p",[a._v("이어지는 단계:")]),a._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[a._v("“카메라” 배치")]),a._v(" "),t("li",[a._v("“렌즈” 선택")]),a._v(" "),t("li",[a._v("“스크린”에 투사")])])])]),a._v(" "),t("h2",{attrs:{id:"in-terms-of-cg-transformation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#in-terms-of-cg-transformation"}},[a._v("#")]),a._v(" In Terms of CG Transformation,")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("객체 배치"),t("br"),a._v("\n→ "),t("strong",[a._v("Modeling Transformation")])])]),a._v(" "),t("li",[t("p",[a._v("카메라 배치"),t("br"),a._v("\n→ "),t("strong",[a._v("Viewing Transformation")])])]),a._v(" "),t("li",[t("p",[a._v("렌즈 선택"),t("br"),a._v("\n→ "),t("strong",[a._v("Projection Transformation")])])]),a._v(" "),t("li",[t("p",[a._v("화면에 출력"),t("br"),a._v("\n→ "),t("strong",[a._v("Viewport Transformation")])])])]),a._v(" "),t("ul",[t("li",[a._v("위 모든 변환은 "),t("strong",[a._v("행렬 곱셈")]),a._v("으로 구성됨")])]),a._v(" "),t("h2",{attrs:{id:"vertex-processing-transformation-pipeline"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vertex-processing-transformation-pipeline"}},[a._v("#")]),a._v(" Vertex Processing (Transformation Pipeline)")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("Object space (body frame):")]),a._v(" "),t("ul",[t("li",[a._v("객체 기준 좌표계")])])]),a._v(" "),t("li",[t("p",[a._v("World space (world frame):")]),a._v(" "),t("ul",[t("li",[a._v("전체 장면 기준 좌표계")])])]),a._v(" "),t("li",[t("p",[a._v("수행할 작업:")]),a._v(" "),t("ul",[t("li",[a._v("이동(translate), 회전(rotate), 크기 조절(scale) 등")]),a._v(" "),t("li",[a._v("이전 강의에서 다룬 모든 affine 변환 포함")])])])]),a._v(" "),t("hr"),a._v(" "),t("p",[t("strong",[a._v("Modeling transformation")])]),a._v(" "),t("ul",[t("li",[a._v("객체 좌표계 (object space) → world 좌표계로 변환")]),a._v(" "),t("li",[a._v("이전 강의에서 배운 affine transformation을 적용함")])]),a._v(" "),t("hr"),a._v(" "),t("p",[t("strong",[a._v("Placing a “camera”")])]),a._v(" "),t("ul",[t("li",[a._v("world 좌표계 상에서 카메라를 배치함")]),a._v(" "),t("li",[a._v("view space (또는 camera space) 정의됨")])]),a._v(" "),t("hr"),a._v(" "),t("p",[t("strong",[a._v("Viewing transformation")])]),a._v(" "),t("ul",[t("li",[a._v("world space → camera space로 변환")]),a._v(" "),t("li",[a._v("즉, world 기준 장면을 카메라 기준으로 재배열")])]),a._v(" "),t("hr"),a._v(" "),t("p",[t("strong",[a._v("Selecting its “lens”")])]),a._v(" "),t("ul",[t("li",[a._v("투영 방식을 정의함 (예: perspective, orthographic 등)")]),a._v(" "),t("li",[a._v("view space → "),t("strong",[a._v("Clip space / NDC (normalized device coordinate) space")])])]),a._v(" "),t("hr"),a._v(" "),t("p",[t("strong",[a._v("Projection transformation")])]),a._v(" "),t("ul",[t("li",[a._v("시야각(FOV), 종횡비, near/far plane 등을 고려하여"),t("br"),a._v("\n3D 공간을 "),t("strong",[a._v("정규화된 장치 좌표계(NDC)")]),a._v(" 로 변환")]),a._v(" "),t("li",[a._v("좌표 범위: (-1, -1, -1) ~ (1, 1, 1)")])]),a._v(" "),t("hr"),a._v(" "),t("p",[t("strong",[a._v("Displaying on a “cinema screen”")])]),a._v(" "),t("ul",[t("li",[a._v("NDC 공간을 이미지 공간으로 변환")]),a._v(" "),t("li",[a._v("즉, 픽셀 좌표계 상에 화면 출력")])]),a._v(" "),t("hr"),a._v(" "),t("p",[t("strong",[a._v("Viewport transformation")])]),a._v(" "),t("ul",[t("li",[a._v("NDC 좌표를 실제 화면 해상도에 맞게 스케일 조정")]),a._v(" "),t("li",[a._v("좌표계를 정규화 공간 → 스크린 공간으로 변환")])]),a._v(" "),t("hr"),a._v(" "),t("p",[t("strong",[a._v("Transformation Pipeline 전체 요약")])]),a._v(" "),t("p",[a._v("Object space → View space → Clip space → Screen space")]),a._v(" "),t("ol",[t("li",[t("strong",[a._v("Modeling transformation")])]),a._v(" "),t("li",[t("strong",[a._v("Viewing transformation")])]),a._v(" "),t("li",[t("strong",[a._v("Projection transformation")])]),a._v(" "),t("li",[t("strong",[a._v("Viewport transformation")])])]),a._v(" "),t("p",[a._v("→ 모든 과정은 "),t("strong",[a._v("행렬 곱(Matrix Multiplication)")]),a._v(" 으로 구성됨")]),a._v(" "),t("hr"),a._v(" "),t("ul",[t("li",[a._v("Modeling, Viewing, Projection, Viewport 변환은"),t("br"),a._v(" "),t("strong",[a._v("4x4 행렬 곱셈")]),a._v("으로 처리됨")])]),a._v(" "),t("hr"),a._v(" "),t("p",[t("strong",[a._v("MVP Matrix 적용")])]),a._v(" "),t("ul",[t("li",[t("p",[a._v("하나의 점 $begin:math:text$ \\mathbf{p}_o $end:math:text$가")]),a._v(" "),t("ul",[t("li",[a._v("모델링 변환: $begin:math:text$ M $end:math:text$")]),a._v(" "),t("li",[a._v("뷰잉 변환: $begin:math:text$ V $end:math:text$")]),a._v(" "),t("li",[a._v("투영 변환: $begin:math:text$ P $end:math:text$")]),a._v(" "),t("li",[a._v("뷰포트 변환: $begin:math:text$ T_{vp} $end:math:text$"),t("br"),a._v("\n을 거쳐서")]),a._v(" "),t("li",[a._v("최종 위치 $begin:math:text$ \\mathbf{p}_s $end:math:text$로 변환됨")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("p_s = T_vp * P * V * M * p_o\n")])])])])]),a._v(" "),t("hr"),a._v(" "),t("h1",{attrs:{id:"modeling-transformation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#modeling-transformation"}},[a._v("#")]),a._v(" Modeling Transformation")]),a._v(" "),t("h2",{attrs:{id:"modeling-transformation-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#modeling-transformation-2"}},[a._v("#")]),a._v(" Modeling Transformation")]),a._v(" "),t("ul",[t("li",[a._v("object space에서 world space로의 변환"),t("br"),a._v("\n$begin:math:text$ \\mathbf{p}_w = M \\mathbf{p}_o $end:math:text$")]),a._v(" "),t("li",[a._v("이때 M은 affine transformation들의 조합")]),a._v(" "),t("li",[a._v("예: 이동, 회전, 스케일 등")])]),a._v(" "),t("hr"),a._v(" "),t("h2",{attrs:{id:"recall-directions-of-the-arrow"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#recall-directions-of-the-arrow"}},[a._v("#")]),a._v(' Recall: Directions of the "arrow"')]),a._v(" "),t("ul",[t("li",[a._v("$begin:math:text$ \\mathbf{p}_w = M \\mathbf{p}^{(1)} $end:math:text$")]),a._v(" "),t("li",[a._v("1번째 의미: geometry 변환 방향")]),a._v(" "),t("li",[a._v("3번째 의미: frame이 바뀌는 관점에서 → 방향 반대가 되는 것처럼 보일 수 있음")])]),a._v(" "),t("hr"),a._v(" "),t("h2",{attrs:{id:"modeling-transformation-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#modeling-transformation-3"}},[a._v("#")]),a._v(" Modeling Transformation")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("객체는 "),t("strong",[a._v("object의 고유 좌표계(body frame)")]),a._v(" 에 정의됨")])]),a._v(" "),t("li",[t("p",[a._v("object → world 변환을 "),t("strong",[a._v("modeling transformation")]),a._v("이라 하며"),t("br"),a._v("\n행렬 $begin:math:text$ M $end:math:text$로 표현됨")])]),a._v(" "),t("li",[t("p",[a._v("이 행렬 $begin:math:text$ M $end:math:text$은 지금까지 배운 affine 변환(이동, 회전, 스케일 등)의 조합")])])]),a._v(" "),t("hr"),a._v(" "),t("p",[t("strong",[a._v("예시: 다중 부품의 modeling")])]),a._v(" "),t("ul",[t("li",[a._v("바퀴, 캐빈, 컨테이너 각각의 object frame에서\n"),t("ul",[t("li",[a._v("modeling matrix $begin:math:text$ M_{wheel}, M_{cab}, M_{container} $end:math:text$를 적용")]),a._v(" "),t("li",[a._v("최종적으로 world frame 상의 전체 트럭 위치가 구성됨")])])])]),a._v(" "),t("hr"),a._v(" "),t("h2",{attrs:{id:"quiz-1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#quiz-1"}},[a._v("#")]),a._v(" Quiz 1")]),a._v(" "),t("h1",{attrs:{id:"viewing-transformation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#viewing-transformation"}},[a._v("#")]),a._v(" Viewing Transformation")]),a._v(" "),t("h2",{attrs:{id:"viewing-transformation-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#viewing-transformation-2"}},[a._v("#")]),a._v(" Viewing Transformation")]),a._v(" "),t("ul",[t("li",[a._v("Viewing transformation은 "),t("strong",[a._v("world space")]),a._v("에서 **camera space(view space)**로 변환하는 연산이다.")]),a._v(" "),t("li",[a._v("변환된 결과는 결국 화면상의 2D 이미지(screen space)에 나타난다.")]),a._v(" "),t("li",[a._v("이 과정은 다음과 같은 수식을 따른다:"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("pᵥ = V * p𝓌\n")])])])])]),a._v(" "),t("h2",{attrs:{id:"recall-that"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#recall-that"}},[a._v("#")]),a._v(" Recall that...")]),a._v(" "),t("ul",[t("li",[t("ol",[t("li",[a._v("객체 배치"),t("br"),a._v("\n→ Modeling transformation")])])]),a._v(" "),t("li",[t("ol",{attrs:{start:"2"}},[t("li",[a._v('"카메라" 배치'),t("br"),a._v("\n→ Viewing transformation")])])]),a._v(" "),t("li",[t("ol",{attrs:{start:"3"}},[t("li",[a._v('"렌즈" 선택'),t("br"),a._v("\n→ Projection transformation")])])]),a._v(" "),t("li",[t("ol",{attrs:{start:"4"}},[t("li",[a._v('"스크린"에 표시'),t("br"),a._v("\n→ Viewport transformation")])])])]),a._v(" "),t("h2",{attrs:{id:"viewing-transformation-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#viewing-transformation-3"}},[a._v("#")]),a._v(" Viewing Transformation")]),a._v(" "),t("ul",[t("li",[a._v("Viewing transformation은 "),t("strong",[a._v("rigid transformation")]),a._v("으로서, "),t("strong",[a._v("회전과 이동")]),a._v("을 포함한다.")]),a._v(" "),t("li",[a._v("world space에서 view space로 변환하는 데 사용되며, 변환 행렬은 "),t("strong",[a._v("viewing matrix V")]),a._v("이다.")])]),a._v(" "),t("h2",{attrs:{id:"viewing-transformation-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#viewing-transformation-4"}},[a._v("#")]),a._v(" Viewing Transformation")]),a._v(" "),t("ul",[t("li",[a._v("목적: "),t("strong",[a._v("camera frame")]),a._v(" 상에서 모든 객체의 vertex들을 표현하는 것")]),a._v(" "),t("li",[a._v("이를 위해 "),t("strong",[a._v("camera frame")]),a._v("을 정의해야 함 (world frame 기준)")]),a._v(" "),t("li",[a._v("camera frame을 정의한다는 것은 곧 "),t("strong",[a._v("카메라의 위치와 방향")]),a._v("을 결정하는 것과 같다.")])]),a._v(" "),t("h2",{attrs:{id:"defining-camera-frame-1-lookat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#defining-camera-frame-1-lookat"}},[a._v("#")]),a._v(' Defining Camera Frame 1 - "LookAt"')]),a._v(" "),t("ul",[t("li",[a._v("카메라의 위치와 방향을 정의하는 여러 방식이 있다.")]),a._v(" "),t("li",[a._v("그 중 직관적인 방식으로 "),t("strong",[a._v("lookat 함수")]),a._v("를 소개:\n"),t("ul",[t("li",[t("strong",[a._v("Eye point")]),a._v(": 카메라 위치")]),a._v(" "),t("li",[t("strong",[a._v("Look-at point")]),a._v(": 카메라가 바라보는 지점")]),a._v(" "),t("li",[t("strong",[a._v("Up vector")]),a._v(": 어느 방향이 위를 나타내는지 설명")])])])]),a._v(" "),t("h2",{attrs:{id:"demo-lookat-function"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#demo-lookat-function"}},[a._v("#")]),a._v(" [Demo] LookAt Function")]),a._v(" "),t("ul",[t("li",[a._v("https://learnwebgl.brown37.net/07_camera/camera_lookat/camera_lookat.html")]),a._v(" "),t("li",[a._v("슬라이더를 움직이며 eye, center, up 값을 바꿔보면,")]),a._v(" "),t("li",[a._v("3D 장면의 뷰가 어떻게 변하는지 관찰할 수 있다.")])]),a._v(" "),t("h2",{attrs:{id:"defining-camera-frame-1-lookat-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#defining-camera-frame-1-lookat-2"}},[a._v("#")]),a._v(' Defining Camera Frame 1 - "LookAt"')]),a._v(" "),t("ul",[t("li",[a._v("eye point, look-at point, up vector가 주어지면, "),t("strong",[a._v("camera frame")]),a._v("을 계산할 수 있다.")]),a._v(" "),t("li",[a._v("카메라 좌표축으로는 일반적으로 "),t("strong",[a._v("u, v, w")]),a._v(" 벡터를 사용하며, 이는 각각 다음을 나타냄:\n"),t("ul",[t("li",[t("strong",[a._v("u")]),a._v(": 오른쪽 방향")]),a._v(" "),t("li",[t("strong",[a._v("v")]),a._v(": 위쪽 방향")]),a._v(" "),t("li",[t("strong",[a._v("w")]),a._v(": 뒤쪽 방향")])])]),a._v(" "),t("li",[a._v("camera frame을 정의하려면 "),t("strong",[a._v("u, v, w 벡터")]),a._v("와 "),t("strong",[a._v("원점")]),a._v("을 구해야 함")])]),a._v(" "),t("h2",{attrs:{id:"given-eye-point-look-at-point-up-vector"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#given-eye-point-look-at-point-up-vector"}},[a._v("#")]),a._v(" Given Eye point, Look-at point, Up vector")]),a._v(" "),t("ul",[t("li",[a._v("Eye point, Look-at point, Up vector를 이용하여 카메라 좌표계를 정의한다.")])]),a._v(" "),t("h2",{attrs:{id:"getting-origin-point"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#getting-origin-point"}},[a._v("#")]),a._v(" Getting origin point")]),a._v(" "),t("ul",[t("li",[a._v("Eye point 자체가 "),t("strong",[a._v("카메라 좌표계의 원점")]),a._v("이 된다."),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("origin of camera frame = Eye point\n")])])])])]),a._v(" "),t("h2",{attrs:{id:"getting-w-axis-vector"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#getting-w-axis-vector"}},[a._v("#")]),a._v(' Getting "w" axis vector')]),a._v(" "),t("ul",[t("li",[a._v("Look-at point를 바라보는 방향을 w축으로 정의한다."),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("w = (P_eye - P_ref) / ||P_eye - P_ref||\n")])])])])]),a._v(" "),t("h2",{attrs:{id:"getting-u-axis-vector"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#getting-u-axis-vector"}},[a._v("#")]),a._v(' Getting "u" axis vector')]),a._v(" "),t("ul",[t("li",[a._v("up 방향 벡터와 w 벡터의 외적을 통해 u 축을 계산한다."),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("u = (V_up × w) / ||V_up × w||\n")])])])])]),a._v(" "),t("h2",{attrs:{id:"getting-v-axis-vector"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#getting-v-axis-vector"}},[a._v("#")]),a._v(' Getting "v" axis vector')]),a._v(" "),t("ul",[t("li",[a._v("직교좌표계를 만들기 위해 다음과 같이 정의한다."),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("v = w × u\n")])])])])]),a._v(" "),t("h2",{attrs:{id:"recall-2-affine-transformation-matrix-defines-an-affine-frame-w-r-t-world-frame"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#recall-2-affine-transformation-matrix-defines-an-affine-frame-w-r-t-world-frame"}},[a._v("#")]),a._v(" Recall: 2) Affine Transformation Matrix defines an Affine Frame w.r.t. World Frame")]),a._v(" "),t("ul",[t("li",[a._v("Affine 변환 행렬 M은 좌표계(프레임)를 변환하는데 사용된다.")]),a._v(" "),t("li",[a._v("프레임 {1}은 프레임 {0} 기준으로 정의된다.")]),a._v(" "),t("li",[a._v("좌표계 축(x, y, z)과 원점 좌표가 행렬의 열(column)로 구성된다.")])]),a._v(" "),t("h2",{attrs:{id:"thus-the-camera-frame-is-defined-by"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#thus-the-camera-frame-is-defined-by"}},[a._v("#")]),a._v(" Thus, the Camera Frame is defined by")]),a._v(" "),t("ul",[t("li",[a._v("camera frame의 변환 행렬 M은 다음과 같이 구성된다:"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("| u_x  v_x  w_x  P_eye_x |\n| u_y  v_y  w_y  P_eye_y |\n| u_z  v_z  w_z  P_eye_z |\n|  0     0     0      1  |\n")])])])])]),a._v(" "),t("h2",{attrs:{id:"how-can-we-get-viewing-matrix-v-from-the-camera-frame"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#how-can-we-get-viewing-matrix-v-from-the-camera-frame"}},[a._v("#")]),a._v(" How can we get viewing matrix V from the camera frame?")]),a._v(" "),t("ul",[t("li",[a._v("모델링 변환의 방식과 유사하게 viewing matrix V를 구할 수 있다.")]),a._v(" "),t("li",[a._v("기본적으로, 객체의 body frame에서의 좌표를 world frame으로 변환하는 affine matrix의 역행렬이 바로 viewing matrix가 된다.")])]),a._v(" "),t("h2",{attrs:{id:"how-can-we-get-viewing-matrix-v-from-the-camera-frame-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#how-can-we-get-viewing-matrix-v-from-the-camera-frame-2"}},[a._v("#")]),a._v(" How can we get viewing matrix V from the camera frame?")]),a._v(" "),t("ul",[t("li",[a._v("객체 공간(Object space)을 카메라 공간(Camera space)으로 바꾸면, 어떤 변환 행렬이 필요할까?")])]),a._v(" "),t("h2",{attrs:{id:"how-can-we-get-viewing-matrix-v-from-the-camera-frame-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#how-can-we-get-viewing-matrix-v-from-the-camera-frame-3"}},[a._v("#")]),a._v(" How can we get viewing matrix V from the camera frame?")]),a._v(" "),t("ul",[t("li",[a._v("뷰 공간(View space) → 월드 공간(World space) 방향으로 변환한다면?")])]),a._v(" "),t("h2",{attrs:{id:"how-can-we-get-viewing-matrix-v-from-the-camera-frame-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#how-can-we-get-viewing-matrix-v-from-the-camera-frame-4"}},[a._v("#")]),a._v(" How can we get viewing matrix V from the camera frame?")]),a._v(" "),t("ul",[t("li",[a._v("카메라 프레임에서의 축 벡터(u, v, w)와 원점(P_eye)를 사용해 변환 행렬을 구성할 수 있다.")]),a._v(" "),t("li",[a._v("이 행렬이 바로 "),t("strong",[a._v("Rigid transformation matrix")]),a._v("이다."),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("| u_x  v_x  w_x  P_eye_x |\n| u_y  v_y  w_y  P_eye_y |\n| u_z  v_z  w_z  P_eye_z |\n|  0     0     0     1   |\n")])])])])]),a._v(" "),t("h2",{attrs:{id:"viewing-transformation-is-the-opposite-direction"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#viewing-transformation-is-the-opposite-direction"}},[a._v("#")]),a._v(" Viewing Transformation is the Opposite Direction")]),a._v(" "),t("ul",[t("li",[a._v("Viewing matrix V는 위의 행렬의 역행렬로 정의된다.")]),a._v(" "),t("li",[a._v("즉, "),t("strong",[a._v("반대 방향")]),a._v("으로의 변환이다."),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("V = [ R  t ]^-1\n  = [ R^T  -R^T * t ]\n")])])])])]),a._v(" "),t("h2",{attrs:{id:"inverting-rigid-transformation-matrix"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#inverting-rigid-transformation-matrix"}},[a._v("#")]),a._v(" Inverting Rigid Transformation Matrix")]),a._v(" "),t("ul",[t("li",[a._v("3×3 회전 행렬 R과 3×1 이동 벡터 t를 포함한 rigid 변환 행렬 T의 역행렬은 다음과 같다:"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("T = [ R  t ]\n    [ 0  1 ]\n\nT^-1 = [ R^T  -R^T * t ]\n       [  0        1   ]\n")])])])]),a._v(" "),t("li",[a._v("카메라 프레임 행렬의 경우, R은 u, v, w 방향 벡터로 이루어진다.")])]),a._v(" "),t("h2",{attrs:{id:"viewing-transformation-is-the-opposite-direction-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#viewing-transformation-is-the-opposite-direction-2"}},[a._v("#")]),a._v(" Viewing Transformation is the Opposite Direction")]),a._v(" "),t("ul",[t("li",[a._v("V는 다음과 같이 명시적으로 구성된다:"),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("V =\n| u_x  v_x  w_x  -u·P_eye |\n| u_y  v_y  w_y  -v·P_eye |\n| u_z  v_z  w_z  -w·P_eye |\n|  0     0     0       1  |\n")])])])])]),a._v(" "),t("h2",{attrs:{id:"defining-camera-frame-2-translate-rotate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#defining-camera-frame-2-translate-rotate"}},[a._v("#")]),a._v(" Defining Camera Frame 2 - Translate & Rotate")]),a._v(" "),t("ul",[t("li",[a._v('"LookAt" 함수 외에도, 카메라의 위치와 방향을 정의할 수 있는 방법이 있다.')]),a._v(" "),t("li",[a._v("단순히 "),t("strong",[a._v("translate")]),a._v("하고 "),t("strong",[a._v("rotate")]),a._v("하면 rigid transformation 행렬로 정의 가능하다.")])]),a._v(" "),t("h2",{attrs:{id:"demo-translate-rotate-camera"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#demo-translate-rotate-camera"}},[a._v("#")]),a._v(" [Demo] Translate & Rotate Camera")]),a._v(" "),t("ul",[t("li",[a._v("링크: "),t("a",{attrs:{href:"http://learnwebgl.brown37.net/07_cameras/camera_trunk_axes/camera_trunk_axes.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("http://learnwebgl.brown37.net/07_cameras/camera_trunk_axes/camera_trunk_axes.html"),t("OutboundLink")],1)]),a._v(" "),t("li",[a._v("슬라이더로 eye 위치를 바꾸거나 축 방향 및 각도를 지정해 회전하는 카메라 움직임을 시각적으로 관찰할 수 있다.")])]),a._v(" "),t("h2",{attrs:{id:"moving-camera-vs-moving-world"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#moving-camera-vs-moving-world"}},[a._v("#")]),a._v(" Moving Camera vs. Moving World")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("사실, 이 둘은 "),t("strong",[a._v("동등한 연산")]),a._v("이다.")])]),a._v(" "),t("li",[t("p",[a._v("카메라를 (1, 0, 2)만큼 이동시키는 것은"),t("br"),a._v("\n== 월드를 (-1, 0, -2)만큼 이동시키는 것과 같다.")])]),a._v(" "),t("li",[t("p",[a._v("카메라를 y축 기준으로 "),t("strong",[a._v("60도 회전")]),a._v("시키는 것은"),t("br"),a._v("\n== 월드를 y축 기준으로 "),t("strong",[a._v("-60도 회전")]),a._v("시키는 것과 같다.")])])]),a._v(" "),t("h2",{attrs:{id:"demo-moving-camera-vs-moving-world"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#demo-moving-camera-vs-moving-world"}},[a._v("#")]),a._v(" [Demo] Moving Camera vs. Moving World")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("https://webglfundamentals.org/webgl/lessons/resources/camera-move-camera.html?mode=0")])]),a._v(" "),t("li",[t("p",[a._v("https://webglfundamentals.org/webgl/lessons/resources/camera-move-camera.html?mode=2")])]),a._v(" "),t("li",[t("p",[a._v("(Left) Moving camera")])]),a._v(" "),t("li",[t("p",[a._v("(Center) Moving world")])])])])}),[],!1,null,null,null);t.default=i.exports}}]);